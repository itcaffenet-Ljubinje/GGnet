# ============================================================================
# GGnet Diskless System - Enhanced DHCP Configuration
# ============================================================================
# Dynamic boot file selection based on client architecture
# Supports: UEFI (with/without SecureBoot), Legacy BIOS
# Compatible with: ggRock-style diskless booting
# ============================================================================

# Global settings
default-lease-time 600;
max-lease-time 7200;
authoritative;
ddns-update-style none;

# Log settings
log-facility local7;

# Define client architecture option (option 93)
option arch code 93 = unsigned integer 16;

# Define iPXE user-class option (to detect if already running iPXE)
option user-class code 77 = string;

# Subnet configuration
subnet 192.168.1.0 netmask 255.255.255.0 {
    range 192.168.1.100 192.168.1.200;
    option routers 192.168.1.1;
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    option domain-name "ggnet.local";
    option broadcast-address 192.168.1.255;
    
    # TFTP Server (GGnet server IP)
    next-server 192.168.1.10;  # ⚠️ CHANGE THIS to your GGnet server IP!
    
    # Allow PXE booting
    allow booting;
    allow bootp;
    
    # ========================================================================
    # DYNAMIC BOOT FILE SELECTION (ggRock-style)
    # ========================================================================
    # Architecture codes (option 93):
    #   00:00 = Legacy BIOS (PXE)
    #   00:06 = UEFI IA32 (32-bit)
    #   00:07 = UEFI x64 (standard)
    #   00:09 = UEFI x64 with HTTP support
    # ========================================================================
    
    if option arch = 00:07 {
        # UEFI x64 (most common - Windows 10/11)
        if exists user-class and option user-class = "iPXE" {
            # Already running iPXE, load our boot script
            filename "http://192.168.1.10:8000/boot/script.ipxe";
        } else {
            # First boot - load iPXE binary
            # For Windows 11 with SecureBoot, use snponly.efi
            # For Windows 10 or SecureBoot disabled, use ipxe.efi
            filename "snponly.efi";  # ⭐ SecureBoot-signed (Windows 11)
            # filename "ipxe.efi";   # Standard UEFI (Windows 10, no SecureBoot)
        }
    } elsif option arch = 00:09 {
        # UEFI x64 with HTTP boot support
        if exists user-class and option user-class = "iPXE" {
            filename "http://192.168.1.10:8000/boot/script.ipxe";
        } else {
            filename "snponly.efi";  # Use SecureBoot version
        }
    } elsif option arch = 00:06 {
        # UEFI IA32 (32-bit - rare, old tablets/netbooks)
        filename "ipxe32.efi";
    } elsif option arch = 00:00 {
        # Legacy BIOS (old systems)
        if exists user-class and option user-class = "iPXE" {
            filename "http://192.168.1.10:8000/boot/script.ipxe";
        } else {
            filename "undionly.kpxe";  # UNDI driver for network boot
        }
    } else {
        # Unknown architecture - default to UEFI
        log(concat("Unknown architecture: ", binary-to-ascii(16, 16, ":", option arch)));
        filename "ipxe.efi";
    }
    
    # ========================================================================
    # TFTP ROOT PATH (for tftp-hpa or dnsmasq)
    # ========================================================================
    # All boot files should be in /var/lib/tftp/ on the server:
    #   /var/lib/tftp/snponly.efi
    #   /var/lib/tftp/ipxe.efi
    #   /var/lib/tftp/ipxe32.efi
    #   /var/lib/tftp/undionly.kpxe
    # ========================================================================
}

# Static host entries will be added here by GGnet
# Example:
# host client01 {
#     hardware ethernet 00:11:22:33:44:55;
#     fixed-address 192.168.1.101;
#     option host-name "client01";
# }
