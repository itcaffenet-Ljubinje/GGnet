#!/bin/bash

# GGnet TFTP Configuration Script
# Configures TFTP server for PXE boot

set -e

# Configuration
TFTP_DIR="/opt/ggnet/tftp"
TFTP_CONFIG="/etc/default/tftpd-hpa"
TFTP_SERVICE="tftpd-hpa"
TFTP_PORT="69"
IPXE_VERSION="1.21.1"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   log_error "This script must be run as root"
   exit 1
fi

# Install TFTP server
log_info "Installing TFTP server..."
if command -v apt-get &> /dev/null; then
    apt-get update
    apt-get install -y tftpd-hpa
elif command -v yum &> /dev/null; then
    yum install -y tftp-server
    TFTP_SERVICE="tftp"
elif command -v dnf &> /dev/null; then
    dnf install -y tftp-server
    TFTP_SERVICE="tftp"
else
    log_error "Package manager not supported. Please install TFTP server manually."
    exit 1
fi

# Create TFTP directory
log_info "Creating TFTP directory..."
mkdir -p "$TFTP_DIR"
chown nobody:nogroup "$TFTP_DIR"
chmod 755 "$TFTP_DIR"

# Download and install iPXE
log_info "Downloading iPXE boot files..."
cd /tmp

# Download iPXE
if [[ ! -f "ipxe-${IPXE_VERSION}.tar.gz" ]]; then
    wget "https://github.com/ipxe/ipxe/archive/v${IPXE_VERSION}.tar.gz" -O "ipxe-${IPXE_VERSION}.tar.gz"
fi

# Extract and build iPXE
tar -xzf "ipxe-${IPXE_VERSION}.tar.gz"
cd "ipxe-${IPXE_VERSION}"

# Install build dependencies
log_info "Installing build dependencies..."
if command -v apt-get &> /dev/null; then
    apt-get install -y build-essential liblzma-dev
elif command -v yum &> /dev/null; then
    yum groupinstall -y "Development Tools"
    yum install -y xz-devel
elif command -v dnf &> /dev/null; then
    dnf groupinstall -y "Development Tools"
    dnf install -y xz-devel
fi

# Build iPXE
log_info "Building iPXE..."
make -j$(nproc)

# Copy iPXE files to TFTP directory
log_info "Installing iPXE boot files..."
cp bin/ipxe.efi "$TFTP_DIR/"
cp bin/ipxe.lkrn "$TFTP_DIR/"
cp bin/undionly.kpxe "$TFTP_DIR/"

# Create iPXE configuration script
log_info "Creating iPXE configuration script..."
cat > "$TFTP_DIR/ipxe.cfg" << 'EOF'
#!ipxe
# GGnet iPXE Configuration

# Set default menu timeout
set menu-timeout 5000

# Set server IP (will be replaced by DHCP)
set server-ip 192.168.1.1

# Menu system
:start
menu GGnet Diskless Boot
item --gap -- ------------------------- Operating Systems -------------------------
item windows11     Windows 11 Pro
item windows10     Windows 10 LTSC
item ubuntu22      Ubuntu 22.04 LTS
item --gap -- ------------------------- Utilities -------------------------
item memtest       MemTest86
item --gap -- ------------------------- Settings -------------------------
item config        Boot Configuration
item shell         iPXE Shell
item reboot        Reboot
item exit          Exit
choose --timeout ${menu-timeout} --default windows11 selected
goto ${selected}

:windows11
echo Booting Windows 11 Pro...
sanboot iscsi:${server-ip}:::1:iqn.2024.ggnet.local:windows11
goto start

:windows10
echo Booting Windows 10 LTSC...
sanboot iscsi:${server-ip}:::1:iqn.2024.ggnet.local:windows10
goto start

:ubuntu22
echo Booting Ubuntu 22.04 LTS...
sanboot iscsi:${server-ip}:::1:iqn.2024.ggnet.local:ubuntu22
goto start

:memtest
echo Booting MemTest86...
kernel http://${server-ip}/memtest/memtest.bin
boot

:config
echo Boot Configuration
echo Server IP: ${server-ip}
echo MAC Address: ${mac}
echo IP Address: ${ip}
echo Gateway: ${gateway}
echo DNS: ${dns}
echo
echo Press any key to continue...
prompt
goto start

:shell
echo Starting iPXE shell...
shell

:reboot
reboot

:exit
exit
EOF

# Create machine-specific iPXE scripts directory
mkdir -p "$TFTP_DIR/scripts"
chown nobody:nogroup "$TFTP_DIR/scripts"
chmod 755 "$TFTP_DIR/scripts"

# Create example machine script
cat > "$TFTP_DIR/scripts/example.cfg" << 'EOF'
#!ipxe
# Example machine-specific iPXE script
# This file would be generated by GGnet for each machine

set machine-id example-machine
set server-ip 192.168.1.1

echo Booting ${machine-id}...
echo Server: ${server-ip}
echo MAC: ${mac}
echo IP: ${ip}

# Boot from assigned iSCSI target
sanboot iscsi:${server-ip}:::1:iqn.2024.ggnet.local:${machine-id}
EOF

# Configure TFTP server
log_info "Configuring TFTP server..."
if command -v apt-get &> /dev/null; then
    # Ubuntu/Debian
    cat > "$TFTP_CONFIG" << EOF
# /etc/default/tftpd-hpa
TFTP_USERNAME="tftp"
TFTP_DIRECTORY="$TFTP_DIR"
TFTP_ADDRESS="0.0.0.0:$TFTP_PORT"
TFTP_OPTIONS="--secure --create"
RUN_DAEMON="yes"
EOF
elif command -v yum &> /dev/null || command -v dnf &> /dev/null; then
    # CentOS/RHEL
    cat > "/etc/xinetd.d/tftp" << EOF
service tftp
{
    socket_type             = dgram
    protocol                = udp
    wait                    = yes
    user                    = root
    server                  = /usr/sbin/in.tftpd
    server_args             = -s $TFTP_DIR
    disable                 = no
    per_source              = 11
    cps                     = 100 2
    flags                   = IPv4
}
EOF
fi

# Configure firewall
log_info "Configuring firewall..."
if command -v ufw &> /dev/null; then
    # Ubuntu/Debian UFW
    ufw allow 69/udp
elif command -v firewall-cmd &> /dev/null; then
    # CentOS/RHEL firewalld
    firewall-cmd --permanent --add-service=tftp
    firewall-cmd --reload
elif command -v iptables &> /dev/null; then
    # Generic iptables
    iptables -A INPUT -p udp --dport 69 -j ACCEPT
    iptables-save > /etc/iptables/rules.v4 2>/dev/null || true
fi

# Enable and start TFTP server
log_info "Enabling and starting TFTP server..."
if command -v apt-get &> /dev/null; then
    systemctl enable tftpd-hpa
    systemctl restart tftpd-hpa
elif command -v yum &> /dev/null || command -v dnf &> /dev/null; then
    systemctl enable xinetd
    systemctl restart xinetd
fi

# Check status
if command -v apt-get &> /dev/null; then
    if systemctl is-active --quiet tftpd-hpa; then
        log_info "TFTP server started successfully"
    else
        log_error "Failed to start TFTP server"
        systemctl status tftpd-hpa
        exit 1
    fi
else
    if systemctl is-active --quiet xinetd; then
        log_info "TFTP server started successfully"
    else
        log_error "Failed to start TFTP server"
        systemctl status xinetd
        exit 1
    fi
fi

# Create log directory
mkdir -p /var/log/ggnet
chown nobody:nogroup /var/log/ggnet

# Test TFTP server
log_info "Testing TFTP server..."
if command -v tftp &> /dev/null; then
    echo "test" > /tmp/tftp_test.txt
    cp /tmp/tftp_test.txt "$TFTP_DIR/"
    rm -f /tmp/tftp_test.txt
    
    # Test download
    cd /tmp
    tftp localhost -c get tftp_test.txt
    if [[ -f "tftp_test.txt" ]]; then
        log_info "TFTP server test successful"
        rm -f tftp_test.txt "$TFTP_DIR/tftp_test.txt"
    else
        log_warn "TFTP server test failed"
    fi
fi

# Create management script
log_info "Creating TFTP management script..."
cat > "/usr/local/bin/ggnet-tftp" << 'EOF'
#!/bin/bash
# GGnet TFTP Management Script

TFTP_DIR="/opt/ggnet/tftp"
SCRIPTS_DIR="$TFTP_DIR/scripts"

case "$1" in
    list)
        echo "Available iPXE scripts:"
        ls -la "$SCRIPTS_DIR"/*.cfg 2>/dev/null || echo "No scripts found"
        ;;
    create)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 create <machine-name>"
            exit 1
        fi
        MACHINE_NAME="$2"
        cat > "$SCRIPTS_DIR/${MACHINE_NAME}.cfg" << EOL
#!ipxe
# Machine-specific iPXE script for ${MACHINE_NAME}
# Generated by GGnet

set machine-id ${MACHINE_NAME}
set server-ip 192.168.1.1

echo Booting \${machine-id}...
echo Server: \${server-ip}
echo MAC: \${mac}
echo IP: \${ip}

# Boot from assigned iSCSI target
sanboot iscsi:\${server-ip}:::1:iqn.2024.ggnet.local:\${machine-id}
EOL
        echo "Created iPXE script for $MACHINE_NAME"
        ;;
    delete)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 delete <machine-name>"
            exit 1
        fi
        MACHINE_NAME="$2"
        if [[ -f "$SCRIPTS_DIR/${MACHINE_NAME}.cfg" ]]; then
            rm -f "$SCRIPTS_DIR/${MACHINE_NAME}.cfg"
            echo "Deleted iPXE script for $MACHINE_NAME"
        else
            echo "Script for $MACHINE_NAME not found"
        fi
        ;;
    status)
        if command -v apt-get &> /dev/null; then
            systemctl status tftpd-hpa
        else
            systemctl status xinetd
        fi
        ;;
    restart)
        if command -v apt-get &> /dev/null; then
            systemctl restart tftpd-hpa
        else
            systemctl restart xinetd
        fi
        echo "TFTP server restarted"
        ;;
    *)
        echo "Usage: $0 {list|create|delete|status|restart}"
        echo "  list          - List available iPXE scripts"
        echo "  create <name> - Create iPXE script for machine"
        echo "  delete <name> - Delete iPXE script for machine"
        echo "  status        - Show TFTP server status"
        echo "  restart       - Restart TFTP server"
        exit 1
        ;;
esac
EOF

chmod +x /usr/local/bin/ggnet-tftp

log_info "TFTP configuration completed successfully!"
log_info "TFTP Directory: $TFTP_DIR"
log_info "iPXE Files: ipxe.efi, ipxe.lkrn, undionly.kpxe"
log_info "Configuration: ipxe.cfg"
log_info "Scripts Directory: $TFTP_DIR/scripts"
log_info "Management Script: /usr/local/bin/ggnet-tftp"

echo
log_info "Next steps:"
echo "1. Configure iSCSI targets"
echo "2. Create machine-specific iPXE scripts"
echo "3. Test PXE boot with a client machine"
echo "4. Use 'ggnet-tftp' command to manage scripts"
