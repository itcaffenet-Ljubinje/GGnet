#!/bin/bash
###############################################################################
# ggnet-iscsi - iSCSI Target Management CLI
#
# Similar to ggRock's ggrock-create-target and ggrock-delete-target
#
# Usage:
#   ggnet-iscsi create <machine-id> <image-path>
#   ggnet-iscsi delete <machine-id>
#   ggnet-iscsi list
#   ggnet-iscsi status <machine-id>
###############################################################################

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Configuration
GGNET_API="${GGNET_API:-http://localhost:8000}"
GGNET_TOKEN_FILE="/var/lib/ggnet/.admin_token"

# Helper functions
info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

check_root() {
    if [ "$EUID" -ne 0 ]; then 
        error "Please run as root (sudo)"
        exit 1
    fi
}

get_token() {
    if [ -f "$GGNET_TOKEN_FILE" ]; then
        cat "$GGNET_TOKEN_FILE"
    else
        error "Admin token not found. Please login first: ggnet login"
        exit 1
    fi
}

# Create iSCSI target
create_target() {
    local machine_id=$1
    local image_path=$2
    
    if [ -z "$machine_id" ] || [ -z "$image_path" ]; then
        error "Usage: ggnet-iscsi create <machine-id> <image-path>"
        exit 1
    fi
    
    check_root
    
    info "Creating iSCSI target for machine $machine_id..."
    
    token=$(get_token)
    
    response=$(curl -s -X POST "$GGNET_API/api/v1/targets/" \
        -H "Authorization: Bearer $token" \
        -H "Content-Type: application/json" \
        -d "{
            \"machine_id\": $machine_id,
            \"image_path\": \"$image_path\",
            \"lun\": 0
        }")
    
    if echo "$response" | grep -q "iqn"; then
        iqn=$(echo "$response" | jq -r '.iqn')
        portal=$(echo "$response" | jq -r '.portal')
        
        info "Target created successfully!"
        echo "  IQN: $iqn"
        echo "  Portal: $portal"
    else
        error "Failed to create target"
        echo "$response" | jq .
        exit 1
    fi
}

# Delete iSCSI target
delete_target() {
    local machine_id=$1
    
    if [ -z "$machine_id" ]; then
        error "Usage: ggnet-iscsi delete <machine-id>"
        exit 1
    fi
    
    check_root
    
    info "Deleting iSCSI target for machine $machine_id..."
    
    token=$(get_token)
    
    # Get target ID first
    targets=$(curl -s "$GGNET_API/api/v1/targets/?machine_id=$machine_id" \
        -H "Authorization: Bearer $token")
    
    target_id=$(echo "$targets" | jq -r '.targets[0].id // empty')
    
    if [ -z "$target_id" ]; then
        error "No target found for machine $machine_id"
        exit 1
    fi
    
    # Delete target
    curl -s -X DELETE "$GGNET_API/api/v1/targets/$target_id" \
        -H "Authorization: Bearer $token" > /dev/null
    
    info "Target deleted successfully!"
}

# List iSCSI targets
list_targets() {
    token=$(get_token)
    
    info "Listing iSCSI targets..."
    echo ""
    
    targets=$(curl -s "$GGNET_API/api/v1/targets/" \
        -H "Authorization: Bearer $token")
    
    echo "$targets" | jq -r '.targets[] | "ID: \(.id)  IQN: \(.iqn)  Machine: \(.machine_id)  Status: \(.status)"'
}

# Get target status
get_status() {
    local machine_id=$1
    
    if [ -z "$machine_id" ]; then
        error "Usage: ggnet-iscsi status <machine-id>"
        exit 1
    fi
    
    token=$(get_token)
    
    targets=$(curl -s "$GGNET_API/api/v1/targets/?machine_id=$machine_id" \
        -H "Authorization: Bearer $token")
    
    echo "$targets" | jq '.targets[0]'
}

# Help message
show_help() {
    cat << EOF
ggnet-iscsi - iSCSI Target Management

Usage:
  ggnet-iscsi <command> [options]

Commands:
  create <machine-id> <image-path>   Create iSCSI target
  delete <machine-id>                Delete iSCSI target
  list                               List all targets
  status <machine-id>                Get target status
  help                               Show this help

Examples:
  ggnet-iscsi create 1 /opt/ggnet/images/windows11.vhdx
  ggnet-iscsi delete 1
  ggnet-iscsi list
  ggnet-iscsi status 1

EOF
}

# Main dispatcher
case "$1" in
    create)
        create_target "$2" "$3"
        ;;
    delete)
        delete_target "$2"
        ;;
    list)
        list_targets
        ;;
    status)
        get_status "$2"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac

exit 0

