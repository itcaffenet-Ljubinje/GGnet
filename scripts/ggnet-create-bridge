#!/bin/bash
###############################################################################
# ggnet-create-bridge - Network Bridge Creation Tool
#
# Similar to ggRock's ggrock-create-bridge
#
# Creates a network bridge for diskless clients with optional NIC bonding
#
# Usage:
#   ggnet-create-bridge --bridge br0 --interfaces eth0,eth1
#   ggnet-create-bridge --bridge br0 --interfaces eth0 --ip 192.168.1.10/24
###############################################################################

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Defaults
BRIDGE_NAME="br0"
INTERFACES=""
IP_ADDRESS=""
GATEWAY=""
MODE="manual"

# Helper functions
info() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
step() { echo -e "${BLUE}[STEP]${NC} $1"; }

check_root() {
    if [ "$EUID" -ne 0 ]; then 
        error "Please run as root (sudo)"
        exit 1
    fi
}

show_help() {
    cat << EOF
ggnet-create-bridge - Network Bridge Creation

Usage:
  ggnet-create-bridge [options]

Options:
  --bridge NAME          Bridge name (default: br0)
  --interfaces LIST      Comma-separated interface list (e.g., eth0,eth1)
  --ip ADDRESS          IP address with CIDR (e.g., 192.168.1.10/24)
  --gateway ADDRESS     Gateway IP (e.g., 192.168.1.1)
  --bond                Enable NIC bonding (802.3ad LACP)
  --help                Show this help

Examples:
  # Create bridge with single interface
  ggnet-create-bridge --bridge br0 --interfaces eth0 --ip 192.168.1.10/24

  # Create bridge with bonded interfaces
  ggnet-create-bridge --bridge br0 --interfaces eth0,eth1 --bond --ip 192.168.1.10/24

  # Create bridge with DHCP
  ggnet-create-bridge --bridge br0 --interfaces eth0

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --bridge)
            BRIDGE_NAME="$2"
            shift 2
            ;;
        --interfaces)
            INTERFACES="$2"
            shift 2
            ;;
        --ip)
            IP_ADDRESS="$2"
            shift 2
            ;;
        --gateway)
            GATEWAY="$2"
            shift 2
            ;;
        --bond)
            MODE="bond"
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Validation
if [ -z "$INTERFACES" ]; then
    error "No interfaces specified. Use --interfaces eth0,eth1"
    exit 1
fi

check_root

# Convert comma-separated list to array
IFS=',' read -ra IFACE_ARRAY <<< "$INTERFACES"

echo ""
echo "========================================="
echo " GGnet Network Bridge Creation"
echo "========================================="
echo ""
info "Configuration:"
echo "  Bridge: $BRIDGE_NAME"
echo "  Interfaces: ${IFACE_ARRAY[*]}"
echo "  IP: ${IP_ADDRESS:-DHCP}"
echo "  Gateway: ${GATEWAY:-Auto}"
echo "  Mode: $MODE"
echo ""

# Step 1: Install required packages
step "Checking dependencies..."
if ! command -v brctl &> /dev/null; then
    info "Installing bridge-utils..."
    apt-get install -y bridge-utils
fi

if [ "$MODE" = "bond" ] && ! command -v ifenslave &> /dev/null; then
    info "Installing ifenslave..."
    apt-get install -y ifenslave
fi

# Step 2: Create bridge
step "Creating bridge $BRIDGE_NAME..."

if ip link show "$BRIDGE_NAME" &> /dev/null; then
    warn "Bridge $BRIDGE_NAME already exists. Deleting..."
    ip link set "$BRIDGE_NAME" down
    brctl delbr "$BRIDGE_NAME"
fi

brctl addbr "$BRIDGE_NAME"
info "Bridge $BRIDGE_NAME created"

# Step 3: Add interfaces or bond
if [ "$MODE" = "bond" ] && [ ${#IFACE_ARRAY[@]} -gt 1 ]; then
    step "Creating bonded interface bond0..."
    
    # Load bonding module
    modprobe bonding
    
    # Create bond
    echo "+bond0" > /sys/class/net/bonding_masters || true
    
    # Set bonding mode (802.3ad LACP)
    echo "802.3ad" > /sys/class/net/bond0/bonding/mode
    echo "100" > /sys/class/net/bond0/bonding/miimon
    
    # Add interfaces to bond
    for iface in "${IFACE_ARRAY[@]}"; do
        step "Adding $iface to bond0..."
        ip link set "$iface" down
        echo "+$iface" > /sys/class/net/bond0/bonding/slaves
        ip link set "$iface" up
    done
    
    # Add bond to bridge
    ip link set bond0 up
    brctl addif "$BRIDGE_NAME" bond0
    
    info "Bond0 created with ${#IFACE_ARRAY[@]} interfaces"
    
else
    # Add interfaces directly to bridge
    for iface in "${IFACE_ARRAY[@]}"; do
        step "Adding $iface to $BRIDGE_NAME..."
        
        # Bring interface down
        ip link set "$iface" down
        
        # Clear IP address
        ip addr flush dev "$iface"
        
        # Add to bridge
        brctl addif "$BRIDGE_NAME" "$iface"
        
        # Bring interface up
        ip link set "$iface" up
        
        info "$iface added to bridge"
    done
fi

# Step 4: Configure bridge IP
step "Configuring bridge IP..."

ip link set "$BRIDGE_NAME" up

if [ -n "$IP_ADDRESS" ]; then
    # Static IP
    ip addr add "$IP_ADDRESS" dev "$BRIDGE_NAME"
    info "Static IP configured: $IP_ADDRESS"
    
    if [ -n "$GATEWAY" ]; then
        ip route add default via "$GATEWAY"
        info "Gateway configured: $GATEWAY"
    fi
else
    # DHCP
    info "Bridge will use DHCP (configure manually if needed)"
fi

# Step 5: Enable IP forwarding
step "Enabling IP forwarding..."
sysctl -w net.ipv4.ip_forward=1
echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/99-ggnet-forwarding.conf
sysctl -p /etc/sysctl.d/99-ggnet-forwarding.conf

# Step 6: Make persistent (netplan or interfaces)
step "Making configuration persistent..."

if [ -d /etc/netplan ]; then
    # Ubuntu with netplan
    cat > /etc/netplan/99-ggnet-bridge.yaml << EOF
network:
  version: 2
  ethernets:
$(for iface in "${IFACE_ARRAY[@]}"; do
    echo "    $iface:"
    echo "      dhcp4: no"
done)
  bridges:
    $BRIDGE_NAME:
      interfaces: [${IFACE_ARRAY[*]}]
$(if [ -n "$IP_ADDRESS" ]; then
    echo "      addresses: [$IP_ADDRESS]"
fi)
$(if [ -n "$GATEWAY" ]; then
    echo "      gateway4: $GATEWAY"
fi)
      dhcp4: $([ -z "$IP_ADDRESS" ] && echo "yes" || echo "no")
      parameters:
        stp: true
        forward-delay: 4
EOF
    
    netplan apply
    info "Netplan configuration saved"
    
elif [ -f /etc/network/interfaces ]; then
    # Debian with /etc/network/interfaces
    cat >> /etc/network/interfaces << EOF

# GGnet bridge configuration
auto $BRIDGE_NAME
iface $BRIDGE_NAME inet $([ -n "$IP_ADDRESS" ] && echo "static" || echo "dhcp")
    bridge_ports ${IFACE_ARRAY[*]}
    bridge_stp on
    bridge_fd 4
$(if [ -n "$IP_ADDRESS" ]; then
    IP_ONLY="${IP_ADDRESS%/*}"
    CIDR="${IP_ADDRESS#*/}"
    echo "    address $IP_ONLY"
    echo "    netmask $(ipcalc -m $IP_ADDRESS | cut -d= -f2)"
fi)
$(if [ -n "$GATEWAY" ]; then
    echo "    gateway $GATEWAY"
fi)

$(for iface in "${IFACE_ARRAY[@]}"; do
    echo "auto $iface"
    echo "iface $iface inet manual"
    echo ""
done)
EOF
    
    info "Interface configuration saved"
fi

# Step 7: Summary
echo ""
echo "========================================="
echo " Bridge Created Successfully!"
echo "========================================="
echo ""
info "Bridge: $BRIDGE_NAME"
echo "  Interfaces: ${IFACE_ARRAY[*]}"
echo "  Mode: $MODE"
echo "  IP: ${IP_ADDRESS:-DHCP}"
echo ""
info "Bridge status:"
brctl show "$BRIDGE_NAME"
echo ""
info "IP configuration:"
ip addr show "$BRIDGE_NAME"
echo ""
info "Configuration is persistent across reboots"
echo ""

exit 0

