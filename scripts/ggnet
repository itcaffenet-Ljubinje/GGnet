#!/bin/bash
###############################################################################
# GGnet - Command Line Interface
# 
# Main CLI tool for managing GGnet diskless system
# Similar to ggRock CLI tools
#
# Usage:
#   ggnet start|stop|restart|status
#   ggnet logs [service]
#   ggnet backup [target]
#   ggnet check
#   ggnet update
###############################################################################

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
GGNET_DIR="/opt/ggnet"
BACKEND_DIR="$GGNET_DIR/backend"
FRONTEND_DIR="$GGNET_DIR/frontend"
LOG_DIR="/var/log/ggnet"
BACKUP_DIR="/var/backups/ggnet"

# Helper functions
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_root() {
    if [ "$EUID" -ne 0 ]; then 
        error "Please run as root (sudo)"
        exit 1
    fi
}

# Service management
start_services() {
    info "Starting GGnet services..."
    
    systemctl start ggnet-backend
    systemctl start ggnet-worker
    systemctl start ggnet-preflight
    
    # Check if Docker is available
    if command -v docker-compose &> /dev/null; then
        info "Starting Docker services..."
        cd "$GGNET_DIR"
        docker-compose up -d
    fi
    
    info "GGnet services started!"
}

stop_services() {
    info "Stopping GGnet services..."
    
    systemctl stop ggnet-backend
    systemctl stop ggnet-worker
    systemctl stop ggnet-preflight
    
    if command -v docker-compose &> /dev/null; then
        cd "$GGNET_DIR"
        docker-compose down
    fi
    
    info "GGnet services stopped!"
}

restart_services() {
    stop_services
    sleep 2
    start_services
}

status_services() {
    echo "========================================="
    echo " GGnet Service Status"
    echo "========================================="
    echo ""
    
    echo "Systemd Services:"
    systemctl status ggnet-backend --no-pager -l | head -5
    echo ""
    systemctl status ggnet-worker --no-pager -l | head -5
    echo ""
    
    if command -v docker-compose &> /dev/null; then
        echo "Docker Services:"
        cd "$GGNET_DIR"
        docker-compose ps
    fi
}

# Log management
show_logs() {
    local service=$1
    
    if [ -z "$service" ]; then
        journalctl -u ggnet-backend -u ggnet-worker -f
    else
        journalctl -u "ggnet-$service" -f
    fi
}

# Backup management
backup_system() {
    local target=$1
    check_root
    
    info "Creating backup..."
    
    mkdir -p "$BACKUP_DIR"
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    if [ -z "$target" ] || [ "$target" = "all" ]; then
        # Full backup
        backup_file="$BACKUP_DIR/ggnet_full_$timestamp.tar.gz"
        
        tar czf "$backup_file" \
            -C "$GGNET_DIR" \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='node_modules' \
            --exclude='venv' \
            --exclude='*.log' \
            backend frontend docker scripts systemd
        
        info "Full backup created: $backup_file"
        
    elif [ "$target" = "database" ]; then
        # Database backup
        backup_file="$BACKUP_DIR/ggnet_db_$timestamp.sql"
        
        if command -v docker &> /dev/null; then
            docker exec ggnet-postgres pg_dump -U ggnet ggnet > "$backup_file"
        else
            pg_dump -U ggnet ggnet > "$backup_file"
        fi
        
        info "Database backup created: $backup_file"
        
    elif [ "$target" = "config" ]; then
        # Config backup
        backup_file="$BACKUP_DIR/ggnet_config_$timestamp.tar.gz"
        
        tar czf "$backup_file" \
            docker/dhcp \
            docker/nginx \
            docker/prometheus \
            docker/grafana/provisioning \
            infra
        
        info "Configuration backup created: $backup_file"
    fi
}

# System checks
run_checks() {
    info "Running pre-flight system checks..."
    python3 "$BACKEND_DIR/scripts/preflight.py"
}

# Update system
update_system() {
    check_root
    
    info "Updating GGnet..."
    
    cd "$GGNET_DIR"
    
    # Pull latest code
    git pull origin main
    
    # Update backend dependencies
    cd "$BACKEND_DIR"
    pip3 install -r requirements.txt
    
    # Run database migrations
    alembic upgrade head
    
    # Rebuild frontend
    cd "$FRONTEND_DIR"
    npm install
    npm run build
    
    # Restart services
    restart_services
    
    info "GGnet updated successfully!"
}

# Help message
show_help() {
    cat << EOF
GGnet - Diskless Boot System Management

Usage:
  ggnet <command> [options]

Commands:
  start              Start all GGnet services
  stop               Stop all GGnet services
  restart            Restart all GGnet services
  status             Show service status
  
  logs [service]     Show logs (backend, worker, or all)
  
  backup [target]    Create backup (all, database, config)
  
  check              Run pre-flight system checks
  
  update             Update GGnet to latest version
  
  help               Show this help message

Examples:
  ggnet start        # Start all services
  ggnet logs backend # Show backend logs
  ggnet backup all   # Full system backup
  ggnet check        # Run system checks

For more information, visit: https://github.com/your-org/ggnet
EOF
}

# Main command dispatcher
case "$1" in
    start)
        check_root
        start_services
        ;;
    stop)
        check_root
        stop_services
        ;;
    restart)
        check_root
        restart_services
        ;;
    status)
        status_services
        ;;
    logs)
        show_logs "$2"
        ;;
    backup)
        backup_system "$2"
        ;;
    check)
        run_checks
        ;;
    update)
        update_system
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac

exit 0

