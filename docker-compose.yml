version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ggnet-postgres
    environment:
      POSTGRES_DB: ggnet
      POSTGRES_USER: ggnet
      POSTGRES_PASSWORD: ggnet_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ggnet -d ggnet"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ggnet-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ggnet-backend
    environment:
      - DATABASE_URL=postgresql://ggnet:ggnet_password@postgres:5432/ggnet
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - UPLOAD_DIR=/opt/ggnet/images
      - TARGET_DIR=/opt/ggnet/targets
    volumes:
      - ggnet_data:/opt/ggnet
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ggnet-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ggnet-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DHCP Server (requires host network access)
  dhcp:
    image: networkboot/dhcpd
    container_name: ggnet-dhcp
    network_mode: host
    volumes:
      - ./docker/dhcp/dhcpd.conf:/data/dhcpd.conf
      - ./docker/dhcp/dhcpd.leases:/data/dhcpd.leases
    restart: unless-stopped
    privileged: true

  # TFTP Server
  tftp:
    image: pghalliday/tftp
    container_name: ggnet-tftp
    ports:
      - "69:69/udp"
    volumes:
      - ./docker/tftp:/var/tftpboot
    restart: unless-stopped

  # dnsmasq (Alternative: integrated DHCP+TFTP+DNS like ggRock)
  # Uncomment to use dnsmasq instead of separate dhcp+tftp services
  # dnsmasq:
  #   image: strm/dnsmasq
  #   container_name: ggnet-dnsmasq
  #   network_mode: host
  #   volumes:
  #     - ./docker/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf
  #     - ./infra/tftp:/var/lib/tftp
  #   cap_add:
  #     - NET_ADMIN
  #   restart: unless-stopped
  #   privileged: true

  # iSCSI Target (requires privileged access)
  iscsi:
    image: openebs/tgt
    container_name: ggnet-iscsi
    ports:
      - "3260:3260"
    volumes:
      - ggnet_data:/opt/ggnet
      - /dev:/dev
    restart: unless-stopped
    privileged: true
    cap_add:
      - SYS_ADMIN
      - NET_ADMIN

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ggnet-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ggnet-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # noVNC Remote Console
  novnc:
    image: theasp/novnc:latest
    container_name: ggnet-novnc
    environment:
      - DISPLAY_WIDTH=1920
      - DISPLAY_HEIGHT=1080
      - RUN_XTERM=no
      - NOVNC_HEARTBEAT=30
    ports:
      - "6080:8080"
    restart: unless-stopped

  # websockify Proxy for VNC
  websockify:
    image: solita/websockify:latest
    container_name: ggnet-websockify
    command: ["5900", "--web", "/usr/share/novnc", "localhost:5900"]
    ports:
      - "5900:5900"
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ggnet_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16